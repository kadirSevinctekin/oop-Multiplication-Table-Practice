

package com.mycompany.oopproje;


import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
/**
 *
 * @author spide
 */
public class login extends javax.swing.JFrame {
    User user1;
    private boolean testFlag=false;
    private AdminFrame af;
    /**
     * Creates new form login
     */
    public login() {
        ImageIcon backgroundImage=new ImageIcon("loginBack.jpg");
        JLabel backgroundLabel=new JLabel(backgroundImage);
        this.setContentPane(backgroundLabel);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtex_kad = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jpass = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 255));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Username:");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Password:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("WELCOME");

        jtex_kad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtex_kadKeyPressed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 255, 102));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Show Password");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpassActionPerformed(evt);
            }
        });
        jpass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jpassKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(174, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jtex_kad, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jpass, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(53, 53, 53)
                        .addComponent(jCheckBox1)))
                .addGap(110, 110, 110))
            .addGroup(layout.createSequentialGroup()
                .addGap(265, 265, 265)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtex_kad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCheckBox1)
                    .addComponent(jpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected())
            jpass.setEchoChar((char)0);
        else
            jpass.setEchoChar('*');
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String fileName="users.txt";
        LinkedList<User> linkedList=new LinkedList<>();
         try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                String name = parts[0].trim();
                String password = parts[1].trim();
                String userType = parts[2].trim();
                User user = new User(name, password, userType);
                linkedList.add(user);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        int index=0;
        boolean flag=false;
        while(index<linkedList.size() && flag==false){
            User temp=linkedList.get(index);
            if(temp.getUserName().equals(jtex_kad.getText()) && temp.getPassword().equals(jpass.getText())){
                flag=true;
                user1=temp;
            }
            index++;
        }
        if(flag==true){
            JOptionPane.showMessageDialog(null, "Login Success");
            if(user1.getUserType().equals("admin")){
                testFlag=true;
                this.setVisible(false);
                af=new AdminFrame();
                af.setLocationRelativeTo(null);
                af.setVisible(true);
            }
            else{
                String fileName1="exams.txt";
                LinkedList<Exam> linkedList1=new LinkedList<>();
                try (BufferedReader exa = new BufferedReader(new FileReader(fileName1))) {
                    String line1;
                    while ((line1 = exa.readLine()) != null) {
                    String[] parts = line1.split(",");
                    String n = parts[0].trim();
                    String a = parts[1].trim();
                    String b = parts[2].trim();
                    Exam exam = new Exam(n, a, b);
                    linkedList1.add(exam);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if(linkedList1.size()==0)
                    JOptionPane.showMessageDialog(null,"There is no exam to solve in system\nAdmin should define exam");
                else{
                    this.setVisible(false);
                    chooseExam choExam=new chooseExam(linkedList1, user1);
                    choExam.setLocationRelativeTo(null);
                    choExam.setVisible(true);
                }
            }
        }
        else
            JOptionPane.showMessageDialog(null, "Incorrect Username or Password");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jpassActionPerformed

    private void jtex_kadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtex_kadKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            String fileName="users.txt";
        LinkedList<User> linkedList=new LinkedList<>();
         try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                String name = parts[0].trim();
                String password = parts[1].trim();
                String userType = parts[2].trim();
                User user = new User(name, password, userType);
                linkedList.add(user);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        int index=0;
        boolean flag=false;
        while(index<linkedList.size() && flag==false){
            User temp=linkedList.get(index);
            if(temp.getUserName().equals(jtex_kad.getText()) && temp.getPassword().equals(jpass.getText())){
                flag=true;
                user1=temp;
            }
            index++;
        }
        if(flag==true){
            JOptionPane.showMessageDialog(null, "Login Success");
            if(user1.getUserType().equals("admin")){
                testFlag=true;
                this.setVisible(false);
                af=new AdminFrame();
                af.setLocationRelativeTo(null);
                af.setVisible(true);
            }
            else{
                String fileName1="exams.txt";
                LinkedList<Exam> linkedList1=new LinkedList<>();
                try (BufferedReader exa = new BufferedReader(new FileReader(fileName1))) {
                    String line1;
                    while ((line1 = exa.readLine()) != null) {
                    String[] parts = line1.split(",");
                    String n = parts[0].trim();
                    String a = parts[1].trim();
                    String b = parts[2].trim();
                    Exam exam = new Exam(n, a, b);
                    linkedList1.add(exam);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if(linkedList1.size()==0)
                    JOptionPane.showMessageDialog(null,"There is no exam to solve in system\nAdmin should define exam");
                else{
                    this.setVisible(false);
                    chooseExam choExam=new chooseExam(linkedList1, user1);
                    choExam.setLocationRelativeTo(null);
                    choExam.setVisible(true);
                }
            }
        }
        else
            JOptionPane.showMessageDialog(null, "Incorrect Username or Password");
        }
    }//GEN-LAST:event_jtex_kadKeyPressed

    private void jpassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jpassKeyPressed
       if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            String fileName="users.txt";
        LinkedList<User> linkedList=new LinkedList<>();
         try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                String name = parts[0].trim();
                String password = parts[1].trim();
                String userType = parts[2].trim();
                User user = new User(name, password, userType);
                linkedList.add(user);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        int index=0;
        boolean flag=false;
        while(index<linkedList.size() && flag==false){
            User temp=linkedList.get(index);
            if(temp.getUserName().equals(jtex_kad.getText()) && temp.getPassword().equals(jpass.getText())){
                flag=true;
                user1=temp;
            }
            index++;
        }
        if(flag==true){
            JOptionPane.showMessageDialog(null, "Login Success");
            if(user1.getUserType().equals("admin")){
                testFlag=true;
                this.setVisible(false);
                af=new AdminFrame();
                af.setLocationRelativeTo(null);
                af.setVisible(true);
            }
            else{
                String fileName1="exams.txt";
                LinkedList<Exam> linkedList1=new LinkedList<>();
                try (BufferedReader exa = new BufferedReader(new FileReader(fileName1))) {
                    String line1;
                    while ((line1 = exa.readLine()) != null) {
                    String[] parts = line1.split(",");
                    String n = parts[0].trim();
                    String a = parts[1].trim();
                    String b = parts[2].trim();
                    Exam exam = new Exam(n, a, b);
                    linkedList1.add(exam);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if(linkedList1.size()==0)
                    JOptionPane.showMessageDialog(null,"There is no exam to solve in system\nAdmin should define exam");
                else{
                    this.setVisible(false);
                    chooseExam choExam=new chooseExam(linkedList1, user1);
                    choExam.setLocationRelativeTo(null);
                    choExam.setVisible(true);
                }
            }
        }
        else
            JOptionPane.showMessageDialog(null, "Incorrect Username or Password");;
        }
    }//GEN-LAST:event_jpassKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField jpass;
    private javax.swing.JTextField jtex_kad;
    // End of variables declaration//GEN-END:variables

    public void setJtex_kad(String x){
        this.jtex_kad.setText(x);
    }
    
    public void setJpass(String x){
        this.jpass.setText(x);
    }

    /**
     * @return the testFlag
     */
    public boolean isTestFlag() {
        return testFlag;
    }
    
    public JButton getButton(){
        return jButton1;
    }
    
    public void setAfFalse(){
        this.af.setVisible(false);
    }
}
