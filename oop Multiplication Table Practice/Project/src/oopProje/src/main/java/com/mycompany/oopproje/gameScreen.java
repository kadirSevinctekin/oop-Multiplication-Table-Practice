
package com.mycompany.oopproje;

import java.awt.event.KeyEvent;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.FileOutputStream;

import java.awt.event.WindowEvent;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFSheet;

/**
 *
 * @author spide
 */
public class gameScreen extends javax.swing.JFrame {
    private User user;
    private childChoice childChoice;
    private int n;
    private int a;
    private int b;
    private Exam exam;
    private TimerGui timerGui;
    int count=0;
    int rowCount=0;
    int elapsedTime, seconds, minutes, hours;
    double startTime, endTime, time;
    private String timeStamp, endingTime;
    ArrayList<output> outputs=new ArrayList<>();
    XSSFWorkbook workbook = new XSSFWorkbook();
    XSSFCellStyle style=workbook.createCellStyle();
    XSSFCellStyle style2=workbook.createCellStyle();
    XSSFCellStyle style3=workbook.createCellStyle();
    XSSFSheet sheet= workbook.createSheet("Rapor");
    
    /**
     * Creates new form gameScreen
     */
    public gameScreen(Exam exam, User user) {
        ImageIcon backgroundImage1=new ImageIcon("purple.jpg");
        JLabel backgroundLabel1=new JLabel(backgroundImage1);
        this.setContentPane(backgroundLabel1);
        this.user=user;
        this.exam=exam;
        this.n=Integer.parseInt(exam.getNumOfQuestions());
        this.a=Integer.parseInt(exam.getA());
        this.b=Integer.parseInt(exam.getB());
        if(this.a>this.b){
            int temp=this.a;
            this.a=this.b;
            this.b=temp;
        }
        
        initComponents();
    }

    private gameScreen() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jTextField2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jTextField3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("X");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("=");

        jTextField4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jButton5.setText("Start");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(jLabel1)
                                .addGap(37, 37, 37)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(60, 60, 60))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String fileName=user.getUserName()+".txt";
        Random rand=new Random();
        int num1, num2;
        String result;
        if(jButton5.getText().equals("Start")){
            timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
            timerGui = new TimerGui(jLabel3);
            startTime=System.currentTimeMillis();
            try (FileWriter writer = new FileWriter(fileName, true)) {
                writer.write("Name, Question, Answer, User Answer, Result, Response Time --- Starting Date: "+timeStamp+"\n");
            } 
            catch (IOException e) {
                e.printStackTrace();
            }
            jButton5.setText("Next");
            num1=rand.nextInt(11);
            while(num1<a|| num1>b)
                num1=rand.nextInt(11);
            num2=rand.nextInt(11);
            while(num2<a || num2>b) 
                num2=rand.nextInt(11);
            count++;
            if(count==n)
                jButton5.setText("Finish");
            jTextField4.setText("Question-"+count);
            jTextField1.setText(Integer.toString(num1));
            jTextField2.setText(Integer.toString(num2));
        }
        else{
            endTime=System.currentTimeMillis();
            time=endTime-startTime;
            startTime=System.currentTimeMillis();
            String answer=jTextField3.getText(); //userAnswer
            int numA=Integer.parseInt(jTextField1.getText());
            int numB=Integer.parseInt(jTextField2.getText());
            if(numA*numB==Integer.parseInt(answer)){
                result="Correct";
                String answerTemp=String.valueOf(Integer.valueOf(jTextField1.getText())*Integer.valueOf(jTextField2.getText()));
                String line=user.getUserName()+"   "+jTextField1.getText()+"x"+jTextField2.getText()+"\t  "+answerTemp+"\t    "+answer+"\t    "+result+"\t"+Double.toString(time/1000)+"\n";
                try (FileWriter writer = new FileWriter(fileName, true)) {
                    writer.write(line);
                } 
                catch (IOException e) {
                     e.printStackTrace();
                }
                String userNamee=user.getUserName();
                String questionn=jTextField1.getText()+"x"+jTextField2.getText();
                int userAnswerr=Integer.parseInt(answer);
                output o1=new output(userNamee,questionn, numA*numB,userAnswerr,"Correct",time/1000);
                outputs.add(o1);
            } 
            else{
                result="Wrong";
                String answerTemp=String.valueOf(Integer.valueOf(jTextField1.getText())*Integer.valueOf(jTextField2.getText()));
                String line=user.getUserName()+"   "+jTextField1.getText()+"x"+jTextField2.getText()+"\t  "+answerTemp+"\t    "+answer+"\t    "+result+"\t"+Double.toString(time/1000)+"\n";
                try (FileWriter writer = new FileWriter(fileName, true)) {
                    writer.write(line);
                } 
                catch (IOException e) {
                     e.printStackTrace();
                }
                String userNamee=user.getUserName();
                String questionn=jTextField1.getText()+"x"+jTextField2.getText();
                int userAnswerr=Integer.parseInt(answer);
                output o1=new output(userNamee,questionn, numA*numB,userAnswerr,"Wrong",time/1000);
                outputs.add(o1);
            }
            if(count<n){
               num1=rand.nextInt(11);
                while(num1<a|| num1>b)
                    num1=rand.nextInt(11);
                num2=rand.nextInt(11);
                while(num2<a || num2>b) 
                    num2=rand.nextInt(11);
                count++;
                jTextField4.setText("Question-"+count);
                jTextField1.setText(Integer.toString(num1));
                jTextField2.setText(Integer.toString(num2)); 
                jTextField3.setText("");
            }
            if(jButton5.getText().equals("Finish")){
                endingTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
                try (FileWriter writer = new FileWriter(fileName, true)) {
                    writer.write("\t\t\t\t\t\t\t   --- Ending Date: "+endingTime+"\n");
                } 
                catch (IOException e) {
                     e.printStackTrace();
                }
                // Kronometreyi durdurma ve excele başlıkları yazdırma
                timerGui.stopTimer();
                int columnCount=0;
                Row row0=sheet.createRow(rowCount);
                style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
                style.setFillPattern(FillPatternType.FINE_DOTS);
                Cell cell00=row0.createCell(columnCount);
                cell00.setCellValue(timeStamp);
                Cell cell0=row0.createCell(++columnCount);
                cell0.setCellValue("Name");
                cell0.setCellStyle(style);
                Cell cell10=row0.createCell(++columnCount);
                cell10.setCellValue("Question");
                cell10.setCellStyle(style);
                Cell cell11=row0.createCell(++columnCount);
                cell11.setCellValue("Answer");
                cell11.setCellStyle(style);
                Cell cell12=row0.createCell(++columnCount);
                cell12.setCellValue("userAnswer");
                cell12.setCellStyle(style);
                Cell cell13=row0.createCell(++columnCount);
                cell13.setCellValue("Result");
                cell13.setCellStyle(style);
                Cell cell14=row0.createCell(++columnCount);
                cell14.setCellValue("Time");
                cell14.setCellStyle(style);
                Cell cell15=row0.createCell(++columnCount);
                cell15.setCellValue("Score");
                cell15.setCellStyle(style);
                // Puanını hesaplayıp rapora yazdırma
                int numOfCorrect=0;
                for(output temp: outputs)
                    if(temp.getResult().equals("Correct"))
                        numOfCorrect++;
                int score=(100/n)*numOfCorrect;
                // For dongusunde kullanıcının her cevabını dogru yanlısa gore yazdırma
                for(output iter : outputs){
                    Row row = sheet.createRow(++rowCount);
                    columnCount=0;
                        Cell cell=row.createCell(++columnCount);
                        cell.setCellValue(iter.getName());
                        Cell cell1=row.createCell(++columnCount);
                        cell1.setCellValue(iter.getQuestion());
                        Cell cell2=row.createCell(++columnCount);
                        cell2.setCellValue(iter.getAnswer());
                        Cell cell3=row.createCell(++columnCount);
                        cell3.setCellValue(iter.getUserAnswer());
                        Cell cell4=row.createCell(++columnCount);
                        cell4.setCellValue(iter.getResult());
                        if(iter.getResult().equals("Correct")){
                            style2.setFillForegroundColor(IndexedColors.BRIGHT_GREEN.getIndex());
                            style2.setFillPattern(FillPatternType.FINE_DOTS);
                            cell4.setCellStyle(style2);
                        }
                        else{
                            style3.setFillForegroundColor(IndexedColors.ROSE.getIndex());
                            style3.setFillPattern(FillPatternType.FINE_DOTS);
                            cell4.setCellStyle(style3);
                        }
                        Cell cell5=row.createCell(++columnCount);
                        cell5.setCellValue(iter.getTime());
                        if(++columnCount==7 && rowCount==1){
                            Cell cellScore=row.createCell(columnCount);
                            cellScore.setCellValue(score);
                        }
                }
                Row rowEnd = sheet.createRow(++rowCount);
                Cell cellEnd=rowEnd.createCell(0);
                cellEnd.setCellValue(endingTime);
                for(int columnTemp=0;columnCount<8;columnCount++)
                    sheet.autoSizeColumn(columnTemp);
                try (FileOutputStream outputStream = new FileOutputStream(user.getUserName()+".xlsx")) {
                    workbook.write(outputStream);
                }
                catch (IOException e) {
                     e.printStackTrace();
                }
                JOptionPane.showMessageDialog(null, "Congrats Finished\nReport Has Been Prepared");
                childChoice=new childChoice(exam, user);
                childChoice.setVisible(true);
                childChoice.setLocationRelativeTo(null);
                this.setVisible(false);
                //this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
            }
            if(count==n)
                    jButton5.setText("Finish");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            String fileName=user.getUserName()+".txt";
        Random rand=new Random();
        int num1, num2;
        String result;
        if(jButton5.getText().equals("Start")){
            timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
            timerGui = new TimerGui(jLabel3);
            startTime=System.currentTimeMillis();
            try (FileWriter writer = new FileWriter(fileName, true)) {
                writer.write("Name, Question, Answer, User Answer, Result, Response Time --- Starting Date: "+timeStamp+"\n");
            } 
            catch (IOException e) {
                e.printStackTrace();
            }
            jButton5.setText("Next");
            num1=rand.nextInt(11);
            while(num1<a|| num1>b)
                num1=rand.nextInt(11);
            num2=rand.nextInt(11);
            while(num2<a || num2>b) 
                num2=rand.nextInt(11);
            count++;
            if(count==n)
                jButton5.setText("Finish");
            jTextField4.setText("Question-"+count);
            jTextField1.setText(Integer.toString(num1));
            jTextField2.setText(Integer.toString(num2));
        }
        else{
            endTime=System.currentTimeMillis();
            time=endTime-startTime;
            startTime=System.currentTimeMillis();
            String answer=jTextField3.getText(); //userAnswer
            int numA=Integer.parseInt(jTextField1.getText());
            int numB=Integer.parseInt(jTextField2.getText());
            if(numA*numB==Integer.parseInt(answer)){
                result="Correct";
                String answerTemp=String.valueOf(Integer.valueOf(jTextField1.getText())*Integer.valueOf(jTextField2.getText()));
                String line=user.getUserName()+"   "+jTextField1.getText()+"x"+jTextField2.getText()+"\t  "+answerTemp+"\t    "+answer+"\t    "+result+"\t"+Double.toString(time/1000)+"\n";
                try (FileWriter writer = new FileWriter(fileName, true)) {
                    writer.write(line);
                } 
                catch (IOException e) {
                     e.printStackTrace();
                }
                String userNamee=user.getUserName();
                String questionn=jTextField1.getText()+"x"+jTextField2.getText();
                int userAnswerr=Integer.parseInt(answer);
                output o1=new output(userNamee,questionn, numA*numB,userAnswerr,"Correct",time/1000);
                outputs.add(o1);
            } 
            else{
                result="Wrong";
                String answerTemp=String.valueOf(Integer.valueOf(jTextField1.getText())*Integer.valueOf(jTextField2.getText()));
                String line=user.getUserName()+"   "+jTextField1.getText()+"x"+jTextField2.getText()+"\t  "+answerTemp+"\t    "+answer+"\t    "+result+"\t"+Double.toString(time/1000)+"\n";
                try (FileWriter writer = new FileWriter(fileName, true)) {
                    writer.write(line);
                } 
                catch (IOException e) {
                     e.printStackTrace();
                }
                String userNamee=user.getUserName();
                String questionn=jTextField1.getText()+"x"+jTextField2.getText();
                int userAnswerr=Integer.parseInt(answer);
                output o1=new output(userNamee,questionn, numA*numB,userAnswerr,"Wrong",time/1000);
                outputs.add(o1);
            }
            if(count<n){
               num1=rand.nextInt(11);
                while(num1<a|| num1>b)
                    num1=rand.nextInt(11);
                num2=rand.nextInt(11);
                while(num2<a || num2>b) 
                    num2=rand.nextInt(11);
                count++;
                jTextField4.setText("Question-"+count);
                jTextField1.setText(Integer.toString(num1));
                jTextField2.setText(Integer.toString(num2)); 
                jTextField3.setText("");
            }
            if(jButton5.getText().equals("Finish")){
                endingTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
                try (FileWriter writer = new FileWriter(fileName, true)) {
                    writer.write("\t\t\t\t\t\t\t   --- Ending Date: "+endingTime+"\n");
                } 
                catch (IOException e) {
                     e.printStackTrace();
                }
                // Kronometreyi durdurma ve excele başlıkları yazdırma
                timerGui.stopTimer();
                int columnCount=0;
                Row row0=sheet.createRow(rowCount);
                style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
                style.setFillPattern(FillPatternType.FINE_DOTS);
                Cell cell00=row0.createCell(columnCount);
                cell00.setCellValue(timeStamp);
                
                Cell cell0=row0.createCell(++columnCount);
                cell0.setCellValue("Name");
                cell0.setCellStyle(style);
                Cell cell10=row0.createCell(++columnCount);
                cell10.setCellValue("Question");
                cell10.setCellStyle(style);
                Cell cell11=row0.createCell(++columnCount);
                cell11.setCellValue("Answer");
                cell11.setCellStyle(style);
                Cell cell12=row0.createCell(++columnCount);
                cell12.setCellValue("userAnswer");
                cell12.setCellStyle(style);
                Cell cell13=row0.createCell(++columnCount);
                cell13.setCellValue("Result");
                cell13.setCellStyle(style);
                Cell cell14=row0.createCell(++columnCount);
                cell14.setCellValue("Time");
                cell14.setCellStyle(style);
                Cell cell15=row0.createCell(++columnCount);
                cell15.setCellValue("Score");
                cell15.setCellStyle(style);
                // Puanını hesaplayıp rapora yazdırma
                int numOfCorrect=0;
                for(output temp: outputs)
                    if(temp.getResult().equals("Correct"))
                        numOfCorrect++;
                int score=(100/n)*numOfCorrect;
                // For dongusunde kullanıcının her cevabını dogru yanlısa gore yazdırma
                for(output iter : outputs){
                    Row row = sheet.createRow(++rowCount);
                    columnCount=0;
                        Cell cell=row.createCell(++columnCount);
                        cell.setCellValue(iter.getName());
                        Cell cell1=row.createCell(++columnCount);
                        cell1.setCellValue(iter.getQuestion());
                        Cell cell2=row.createCell(++columnCount);
                        cell2.setCellValue(iter.getAnswer());
                        Cell cell3=row.createCell(++columnCount);
                        cell3.setCellValue(iter.getUserAnswer());
                        Cell cell4=row.createCell(++columnCount);
                        cell4.setCellValue(iter.getResult());
                        if(iter.getResult().equals("Correct")){
                            style2.setFillForegroundColor(IndexedColors.BRIGHT_GREEN.getIndex());
                            style2.setFillPattern(FillPatternType.FINE_DOTS);
                            cell4.setCellStyle(style2);
                        }
                        else{
                            style3.setFillForegroundColor(IndexedColors.ROSE.getIndex());
                            style3.setFillPattern(FillPatternType.FINE_DOTS);
                            cell4.setCellStyle(style3);
                        }
                        Cell cell5=row.createCell(++columnCount);
                        cell5.setCellValue(iter.getTime());
                        if(++columnCount==7 && rowCount==1){
                            Cell cellScore=row.createCell(columnCount);
                            cellScore.setCellValue(score);
                        }
                }
                Row rowEnd = sheet.createRow(++rowCount);
                Cell cellEnd=rowEnd.createCell(0);
                cellEnd.setCellValue(endingTime);
                for(int columnTemp=0;columnCount<8;columnCount++)
                    sheet.autoSizeColumn(columnTemp);
                try (FileOutputStream outputStream = new FileOutputStream(user.getUserName()+".xlsx")) {
                    workbook.write(outputStream);
                }
                catch (IOException e) {
                     e.printStackTrace();
                }
                JOptionPane.showMessageDialog(null, "Congrats Finished\nReport Has Been Prepared");
                childChoice=new childChoice(exam, user);
                childChoice.setVisible(true);
                childChoice.setLocationRelativeTo(null);
                this.setVisible(false);
                //this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
            }
            if(count==n)
                    jButton5.setText("Finish");
        }
        }
        
    }//GEN-LAST:event_jTextField3KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gameScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
